import java.util.ArrayList;
import java.util.List;
/*
Класс, реализующий подбор ключа для зашифрованного текста перебором. Наиболее подходящий ключ выбирается на основе
оценки, которая присваивается каждому из возможных значений ключа. Наивысшую оценку получает ключ, при котором
в полученном с его применением тексте будет наибольшее количество совпадений со статистически наиболее часто
встречающимися в текстах словами русского языка. Для выставления оценки используется 500 наиболее часто употребляемых
слов русского языка, а также пробел.
 */
public class BruteForceDecoder {
    private final Coder coder;
    private final Alphabet alphabet;
    private static final List<String> COMMON_WORDS = List.of(
            " ", "и", "в", "не", "что", "он", "на", "я", "с", "как", "а",
            "то", "все", "она", "так", "его", "но", "да", "ты", "к", "у",
            "же", "вы", "за", "бы", "по", "только", "ее", "мне", "было", "вот",
            "от", "меня", "еще", "нет", "о", "из", "ему", "теперь", "когда", "даже",
            "вдруг", "если", "уже", "или", "ни", "быть", "был", "него", "до", "вас",
            "нибудь", "опять", "уж", "вам", "ведь", "там", "потом", "себя", "ничего",
            "ей", "может", "они", "тут", "где", "есть", "надо", "ней", "для", "мы",
            "тебя", "их", "чем", "была", "сам", "чтоб", "без", "будто", "чего", "раз",
            "тоже", "себе", "под", "будет", "ж", "тогда", "кто", "этот", "того", "потому",
            "этого", "какой", "совсем", "ним", "здесь", "этом", "один", "почти", "мой", "тем",
            "чтобы", "нее", "сейчас", "были", "куда", "зачем", "всех", "никогда", "можно", "при",
            "наконец", "два", "об", "другой", "хоть", "после", "над", "больше", "тот", "через",
            "эти", "нас", "про", "всего", "них", "какая", "много", "разве", "три", "эту",
            "моя", "впрочем", "хорошо", "свою", "этой", "перед", "иногда", "лучше", "чуть", "том",
            "нельзя", "такой", "им", "более", "всегда", "конечно", "всю", "между", "подумал", "ли",
            "туда", "ей-богу", "словно", "либо", "конец", "хотя", "все-таки", "сегодня", "можно", "надо",
            "несколько", "всё", "особенно", "кроме", "внизу", "вовсе", "впоследствии", "впрочем", "времени", "всею",
            "вся", "всякий", "вышел", "говорил", "говорит", "год", "где-то", "давай", "давно", "даже",
            "далеко", "данные", "день", "деньги", "дело", "дети", "для", "достаточно", "друг", "думал",
            "думать", "его", "едва", "если", "есть", "ехать", "еще", "жаль", "жена", "животные",
            "жизнь", "забыл", "завтра", "заметил", "затем", "зато", "значит", "знать", "ибо", "играть",
            "идет", "из-за", "или", "имеет", "именно", "имя", "интересно", "информация", "их", "кажется",
            "казалось", "как-то", "какая-то", "какие-то", "какой-то", "касается", "книга", "когда-то", "комната", "конечно",
            "которого", "которые", "который", "кроме", "кто-то", "кухня", "легко", "лет", "лицо", "лишь",
            "лучший", "любит", "люди", "маленький", "мало", "мать", "между", "менее", "место", "минута",
            "мнение", "много", "мог", "могу", "мол", "молча", "мороз", "мочь", "муж", "мужчина",
            "наверное", "наверху", "над", "надо", "назад", "найти", "наконец", "написано", "например", "нас",
            "настоящий", "наш", "небо", "недавно", "некоторые", "нельзя", "немного", "несколько", "нет", "нечто",
            "ниже", "никто", "ничего", "новый", "ночь", "нравится", "ну", "нужно", "нх", "о",
            "об", "оба", "обычно", "один", "однако", "однажды", "одного", "одной", "оказалось", "окно",
            "около", "он", "она", "они", "оно", "опять", "особенно", "остался", "отвечал", "отец",
            "откуда", "отлично", "отсюда", "ох", "очередь", "очень", "первый", "перед", "писать", "плечо",
            "по", "под", "подумал", "пойти", "пока", "пол", "получилось", "помнить", "пора", "после",
            "посмотреть", "посреди", "потом", "почему", "почти", "правда", "прекрасно", "при", "примерно", "про",
            "просто", "против", "путь", "пять", "работа", "раз", "разве", "рано", "рассказал", "ребенок",
            "решил", "руки", "рядом", "с", "сам", "сама", "сами", "самый", "свет", "свое",
            "свои", "свой", "сделал", "сделать", "себе", "сегодня", "сейчас", "семья", "сердце", "сидел",
            "сильно", "сказал", "сказала", "сказать", "сколько", "случай", "слышал", "смерть", "сначала", "снова",
            "со", "совсем", "спасибо", "спросил", "стал", "старый", "стол", "сторона", "стоял", "страх",
            "суть", "схватил", "счастье", "сын", "так", "таки", "такое", "там", "твой", "твоя",
            "те", "тебе", "тебя", "тем", "теперь", "то", "тогда", "того", "тоже", "той",
            "только", "том", "тот", "точно", "три", "тут", "ты", "тяжело", "у", "увидел",
            "уже", "улица", "уметь", "умный", "упал", "услышал", "успокоился", "устал", "ушел", "хороший",
            "хорошо", "хотел", "хотеть", "хоть", "хотя", "час", "часто", "часть", "человек", "чем",
            "через", "что", "чтоб", "чтобы", "чувствовал", "чуть", "шепотом", "эта", "эти", "это",
            "этого", "этой", "этом", "этот", "является", "ясно"
    );

    public BruteForceDecoder(Alphabet alphabet) {
        this.alphabet = alphabet;
        this.coder = new Coder();
    }

    public int bruteForce(String inputFile, String outputFile) {
        FileManager fileManager = new FileManager();
        List<String> encryptedLines = fileManager.readFile(inputFile);

        int totalKeys = 33;
        ProgressBar progressBar = new ProgressBar(totalKeys, 50);
        System.out.println("Выполняется подбор ключа:");

        int bestKey = 0;
        int bestScore = -1;
        List<String> bestText = new ArrayList<>();

        for (int key = 0; key < totalKeys; key++) {
            List<String> decryptedLines = new ArrayList<>();
            int currentScore = 0;

            for (String line : encryptedLines) {
                String decryptedLine = new Cypher(alphabet).decode(line, key);
                decryptedLines.add(decryptedLine);
                currentScore += evaluateText(decryptedLine);
            }

            if (currentScore > bestScore) {
                bestScore = currentScore;
                bestKey = key;
                bestText = decryptedLines;
            }

            progressBar.update(key + 1);
        }

        for (String line : bestText) {
            fileManager.writeFile(outputFile, line);
        }

        progressBar.complete();
        return bestKey;
    }

    // оценка (рейтинг) ключа
    private int evaluateText(String text) {
        String[] words = text.split("[^а-яё]+");
        int score = 0;
        for (String word : words) {
            if (COMMON_WORDS.contains(word)) {
                score += word.length();
            }
        }
        return score;
    }
}